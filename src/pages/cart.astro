---
import Layout from '../layouts/Layout.astro';
import { getCart, updateQuantity, removeFromCart } from '../utils/cartUtils';
---

<Layout title="Shopping Cart - Bablon">
  <main class="max-w-7xl mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold mb-8">Your Shopping Cart</h1>
    
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Cart Items Section -->
      <div class="lg:w-2/3">
        <div class="bg-white p-6 rounded-lg shadow-md">
          <div id="cart-items" class="divide-y divide-gray-200">
            <!-- Cart items will be populated with JavaScript -->
            <p class="text-gray-500 py-4 text-center" id="empty-cart-message">Your cart is empty</p>
          </div>
        </div>
      </div>
      
      <!-- Order Summary Section -->
      <div class="lg:w-1/3">
        <div class="bg-white p-6 rounded-lg shadow-md sticky top-6">
          <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
          
          <div class="space-y-2 mb-4">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal</span>
              <span id="subtotal" class="font-medium">₹0.00</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Shipping</span>
              <span id="shipping" class="font-medium">₹0.00</span>
            </div>
            <div class="flex justify-between pt-4 border-t border-gray-200">
              <span class="text-lg font-bold">Total</span>
              <span id="total" class="text-lg font-bold">₹0.00</span>
            </div>
          </div>
          
          <a href="/checkout" id="checkout-btn" class="w-full block text-center mt-6 bg-indigo-600 text-white py-3 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed">
            Proceed to Checkout
          </a>
          
          <a href="/shop" class="w-full block text-center mt-4 text-indigo-600 hover:text-indigo-800">
            Continue Shopping
          </a>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { getCart, updateQuantity, removeFromCart } from '../utils/cartUtils';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Function to render cart
    function renderCart() {
      // Get cart data
      const cart = getCart();
      const cartItemsContainer = document.getElementById('cart-items');
      const emptyCartMessage = document.getElementById('empty-cart-message');
      const subtotalElement = document.getElementById('subtotal');
      const shippingElement = document.getElementById('shipping');
      const totalElement = document.getElementById('total');
      const checkoutBtn = document.getElementById('checkout-btn');
      
      // Clear previous items
      cartItemsContainer.innerHTML = '';
      cartItemsContainer.appendChild(emptyCartMessage);
      
      // Check if cart has items
      if (cart.items && cart.items.length > 0) {
        // Hide empty cart message
        emptyCartMessage.style.display = 'none';
        
        // Calculate totals
        const subtotal = cart.subtotal || cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const shipping = subtotal > 1000 ? 0 : 100; // Free shipping for orders over ₹1000
        const total = subtotal + shipping;
        
        // Update summary values
        subtotalElement.textContent = `₹${subtotal.toFixed(2)}`;
        shippingElement.textContent = shipping === 0 ? 'Free' : `₹${shipping.toFixed(2)}`;
        totalElement.textContent = `₹${total.toFixed(2)}`;
        
        // Enable checkout button
        checkoutBtn.classList.remove('disabled:bg-gray-400', 'disabled:cursor-not-allowed');
        checkoutBtn.disabled = false;
        
        // Render cart items
        cart.items.forEach(item => {
          const itemElement = document.createElement('div');
          itemElement.className = 'flex py-6';
          itemElement.innerHTML = `
            <div class="h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200">
              <img src="${item.image}" alt="${item.name}" class="h-full w-full object-cover object-center">
            </div>
            <div class="ml-4 flex flex-1 flex-col">
              <div>
                <div class="flex justify-between text-base font-medium text-gray-900">
                  <h3>${item.name}</h3>
                  <p class="ml-4">₹${(item.price * item.quantity).toFixed(2)}</p>
                </div>
              </div>
              <div class="flex flex-1 items-end justify-between text-sm">
                <div class="flex items-center border rounded-md">
                  <button class="quantity-btn px-3 py-1" data-action="decrease" data-id="${item.id}">-</button>
                  <span class="px-3 py-1 border-x">${item.quantity}</span>
                  <button class="quantity-btn px-3 py-1" data-action="increase" data-id="${item.id}">+</button>
                </div>
                <button class="remove-item-btn text-red-600 hover:text-red-800" data-id="${item.id}">
                  Remove
                </button>
              </div>
            </div>
          `;
          cartItemsContainer.appendChild(itemElement);
        });
        
        // Add event listeners for quantity buttons
        document.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', (e) => {
            const action = e.target.dataset.action;
            const productId = e.target.dataset.id;
            const currentItem = cart.items.find(item => item.id === productId);
            
            if (action === 'increase') {
              updateQuantity(productId, currentItem.quantity + 1);
            } else if (action === 'decrease' && currentItem.quantity > 1) {
              updateQuantity(productId, currentItem.quantity - 1);
            } else if (action === 'decrease' && currentItem.quantity === 1) {
              removeFromCart(productId);
            }
            
            renderCart();
          });
        });
        
        // Add event listeners for remove buttons
        document.querySelectorAll('.remove-item-btn').forEach(button => {
          button.addEventListener('click', (e) => {
            const productId = e.target.dataset.id;
            removeFromCart(productId);
            renderCart();
          });
        });
      } else {
        // Show empty cart message
        emptyCartMessage.style.display = 'block';
        
        // Update summary values to zero
        subtotalElement.textContent = '₹0.00';
        shippingElement.textContent = '₹0.00';
        totalElement.textContent = '₹0.00';
        
        // Disable checkout button
        checkoutBtn.classList.add('disabled:bg-gray-400', 'disabled:cursor-not-allowed');
        checkoutBtn.disabled = true;
      }
    }
    
    // Initial render
    renderCart();
    
    // Listen for cart updates
    window.addEventListener('cart-updated', () => {
      renderCart();
    });
  });
</script>

<style>
  /* Add any custom styles here */
</style>