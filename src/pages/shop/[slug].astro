---
// Import necessary components and utilities
import Layout from '../../layouts/Layout.astro';
import { productsService } from '../../api/productsService.js';

// Generate static paths for all products
export async function getStaticPaths() {
    const data = await productsService.getProducts();   
    console.log("Products fetched:", data);
    return data.map(product => {
        // Generate slug from product name or use ID if no slug exists
        const slug = product.slug || product.name?.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '') || product.id.toString();
        console.log(`Generating path for product: ${product.name} with slug: ${slug}`);
        return {
            params: { slug },
            props: { product }
        };
    });
}

// Get the product data from props
const { product } = Astro.props;

// Fetch detailed product data from the specific API endpoint
let detailedProduct = product;
try {
  const apiUrl = `https://admin.bablon.in/public/api/products/slug/${product.slug}`;
  console.log("Fetching from API:", apiUrl);
  
  const response = await fetch(apiUrl);
  if (response.ok) {
    detailedProduct = await response.json();
    console.log("Detailed Product Data:", detailedProduct);
  } else {
    console.warn("Failed to fetch detailed product data, using basic product data");
  }
} catch (error) {
  console.error("Error fetching detailed product data:", error);
  console.log("Using basic product data as fallback");
}

console.log("=========================================");
console.log("Final Product Data:", detailedProduct);
console.log("Has Variants:", detailedProduct.has_variants);
console.log("Variants Array:", detailedProduct.variants);
console.log("First Variant:", detailedProduct.variants?.[0]);
console.log("=========================================  ");


// Helper function to format price
const formatPrice = (price) => {
  return parseFloat(price).toLocaleString('en-IN', {
    style: 'currency',
    currency: 'INR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  });
};

// Use the detailed product data and get the first variant as default
const defaultVariant = detailedProduct.variants?.[0] || null;
const currentVariant = defaultVariant || {
  id: detailedProduct.id,
  sku: detailedProduct.sku,
  price: detailedProduct.price,
  discount_price: detailedProduct.discount_price,
  in_stock: detailedProduct.in_stock,
  stock_quantity: detailedProduct.stock_quantity,
  attributes: detailedProduct.attributes,
  images: detailedProduct.gallery || []
};

// Mock related products (you can replace this with actual API call)
const relatedProducts = [
  {
    name: 'Led Adjustable Brass Floor Lamp',
    price: 224,
    originalPrice: 299,
    image: 'https://placehold.co/300x300',
    status: 'SOLD OUT'
  },
  {
    name: 'Solid Wood Shoes Cabinet',
    price: 1199,
    originalPrice: 1499,
    image: 'https://placehold.co/300x300',
    status: 'SALE'
  },
  {
    name: 'Living Room Furniture Chair',
    price: 3049,
    originalPrice: 3499,
    image: 'https://placehold.co/300x300',
    status: 'SALE'
  },
  {
    name: 'Swivel Upholstered Fabric Chair',
    price: 329,
    originalPrice: 449,
    image: 'https://placehold.co/300x300',
    status: 'SALE'
  }
];
---

<Layout title={`${product.name} | Bablon`}>
  <!-- Hidden element to pass product data to JavaScript -->
  <script id="product-data" type="application/json" set:html={JSON.stringify({
    id: detailedProduct.id,
    name: detailedProduct.name,
    sku: detailedProduct.sku,
    description: detailedProduct.description || '',
    has_variants: detailedProduct.has_variants,
    variants: detailedProduct.variants || [],
    category: detailedProduct.category || {}
  })}></script>
  
  <div class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="text-sm mb-8">
      <ol class="flex items-center space-x-2">
        <li><a href="/" class="text-gray-500 hover:text-gray-700">Home</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><a href="/shop" class="text-gray-500 hover:text-gray-700">Shop</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><a href={`/shop/${detailedProduct.category?.name?.toLowerCase().replace(/\s+/g, '-')}`} class="text-gray-500 hover:text-gray-700">{detailedProduct.category?.name}</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><span class="text-gray-900">{detailedProduct.name}</span></li>
      </ol>
    </nav>

    <!-- Product Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Product Images -->
      <div class="space-y-4">
        <div class="relative">
          {currentVariant?.discount_price && (
            <>
              <span class="absolute top-4 left-4 bg-red-600 text-white px-2 py-1 text-sm font-medium">HOT</span>
              <span class="absolute top-4 left-16 bg-gray-900 text-white px-2 py-1 text-sm font-medium">SALE</span>
            </>
          )}
          <img 
            id="mainImage"
            src={currentVariant?.images?.[0] ?? 'https://placehold.co/600x600'} 
            alt={detailedProduct.name} 
            class="w-full rounded-lg shadow-lg" 
          />

        </div>
        <div class="grid grid-cols-4 gap-4">
          {currentVariant?.images?.slice(0, 4).map((image, index) => (
            <img 
              src={image} 
              alt={`${detailedProduct.name} thumbnail ${index + 1}`} 
              class="w-full rounded-lg cursor-pointer hover:opacity-75 transition-opacity thumbnail-image" 
              data-image={image}
            />
          ))}
        </div>
      </div>

      <!-- Product Info -->
      <div class="space-y-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">{detailedProduct.name}</h1>
          <p class="text-sm text-gray-500">SKU: {detailedProduct.sku}</p>
        </div>
        
        <div class="flex items-center space-x-4">
          <div class="flex items-center">
            {Array.from({ length: 5 }).map((_, index) => (
              <svg class={`w-5 h-5 ${index < 4 ? 'text-yellow-400' : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <span class="ml-2 text-gray-600">(12 reviews)</span>
          </div>
          <span class={`px-2 py-1 text-xs font-medium rounded-full ${currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'In Stock' : 'Out of Stock'}
          </span>

        </div>

        <div class="flex items-center space-x-4">
          <span class="text-3xl font-bold text-gray-900">
            {currentVariant ? formatPrice(currentVariant.discount_price || currentVariant.price) : 'No Price Available'}
          </span>
          {currentVariant?.discount_price && (
            <span class="text-lg text-gray-500 line-through">{formatPrice(currentVariant.price)}</span>
          )}
          {currentVariant?.discount_price && (
            <span class="bg-red-100 text-red-800 px-2 py-1 text-sm font-medium rounded">
              {Math.round(((parseFloat(currentVariant.price) - parseFloat(currentVariant.discount_price)) / parseFloat(currentVariant.price)) * 100)}% OFF
            </span>
          )}
        </div>


        <p class="text-gray-600 leading-relaxed">{detailedProduct.description || 'No description available for this product.'}</p>

        <!-- Variant Selection -->
        {detailedProduct.has_variants && detailedProduct.variants && detailedProduct.variants.length > 0 && (
          <div class="space-y-4">
            <h3 class="font-medium text-gray-900">Select Color:</h3>
            <div class="flex flex-wrap gap-3">
              {detailedProduct.variants.map((variant, index) => (
                <button 
                  class={`variant-btn px-4 py-2 border-2 rounded-lg text-sm font-medium transition-all hover:border-gray-900 ${index === 0 ? 'border-gray-900 bg-gray-900 text-white' : 'border-gray-300'}`}
                  data-variant-id={variant.id}
                  data-variant-index={index}
                >
                  {variant.attributes?.Color || `Variant ${index + 1}`}
                </button>
              ))}
            </div>
          </div>
        )}

        <!-- Stock Information -->
        <div class="bg-gray-50 p-4 rounded-lg">
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Available Quantity:</span>
            <span class="font-medium text-gray-900">{currentVariant?.stock_quantity || 0} units</span>
          </div>
        </div>

        <div class="flex items-center space-x-4">
          <div class="flex items-center border rounded-md">
            <button class="px-3 py-2 border-r hover:bg-gray-100 transition-colors" id="decrementBtn">-</button>
            <input type="number" value="1" min="1" max={currentVariant?.stock_quantity || 1} class="w-16 text-center focus:outline-none" id="quantityInput" />
            <button class="px-3 py-2 border-l hover:bg-gray-100 transition-colors" id="incrementBtn">+</button>
          </div>
          <button 
            class="flex-1 bg-gray-900 text-white py-3 px-6 rounded-md hover:bg-gray-800 disabled:bg-gray-400 transition-colors font-medium"
            disabled={!currentVariant?.in_stock || currentVariant?.stock_quantity <= 0}
            id="addToCartBtn"
          >
            {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'ADD TO CART' : 'OUT OF STOCK'}
          </button>
        </div>

        <button class="w-full bg-white border-2 border-gray-900 text-gray-900 py-3 px-6 rounded-md hover:bg-gray-50 transition-colors font-medium">BUY NOW</button>

        <div class="flex items-center space-x-4 pt-4">
          <button class="flex items-center text-gray-500 hover:text-gray-700 transition-colors">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            Add to wishlist
          </button>
          <button class="flex items-center text-gray-500 hover:text-gray-700 transition-colors">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
            </svg>
            Share
          </button>
        </div>
      </div>
    </div>

    <!-- Product Details Tabs -->
    <div class="mt-16">
      <div class="border-b">
        <nav class="-mb-px flex space-x-8">
          <a href="#details" class="border-b-2 border-gray-900 py-4 px-1 text-sm font-medium text-gray-900">Details</a>
          <a href="#specifications" class="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300">Specifications</a>
          <a href="#delivery" class="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300">Delivery & Returns</a>
          <a href="#reviews" class="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300">Reviews (12)</a>
        </nav>
      </div>

      <div class="py-8">
        <div id="details" class="space-y-6">
                      <div>
              <h3 class="text-lg font-semibold mb-4">Product Description</h3>
              <div class="text-gray-600 leading-relaxed space-y-4">
                {detailedProduct.description ? (
                  detailedProduct.description.split('\n').map((paragraph, index) => (
                    paragraph.trim() && <p key={index}>{paragraph.trim()}</p>
                  ))
                ) : (
                  <p>No description available for this product.</p>
                )}
              </div>
            </div>
          
                    {detailedProduct.has_variants && (
            <div>
              <h3 class="text-lg font-semibold mb-4">Available Variants</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {detailedProduct.variants?.map((variant, index) => (
                  <div class="border rounded-lg p-4 hover:border-gray-900 transition-colors">
                    <h4 class="font-medium text-gray-900 mb-2">{variant.attributes?.Color || `Variant ${index + 1}`}</h4>
                    <div class="text-sm text-gray-600 space-y-1">
                      <p>Price: {formatPrice(variant.discount_price || variant.price)}</p>
                      {variant.discount_price && (
                        <p class="text-red-600">Save: {Math.round(((parseFloat(variant.price) - parseFloat(variant.discount_price)) / parseFloat(variant.price)) * 100)}%</p>
                      )}
                      <p>Stock: {variant.stock_quantity} units</p>
                      <p>SKU: {variant.sku}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- Related Products -->
    <div class="mt-16">
      <h2 class="text-2xl font-bold mb-8">RELATED PRODUCTS</h2>
      <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
        {relatedProducts.map((product, index) => (
          <div class="group relative">
            <div class="relative">
              {product.status && (
                <span class={`absolute top-4 left-4 px-2 py-1 text-sm text-white ${
                  product.status === 'SALE' ? 'bg-gray-900' : 'bg-red-600'
                }`}>{product.status}</span>
              )}
              <img src={product.image} alt={product.name} class="w-full rounded-lg" />
              <button class="absolute right-4 top-4 text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </button>
            </div>
            <h3 class="mt-4 text-sm text-gray-700">{product.name}</h3>
            <div class="mt-1 flex items-center space-x-2">
              <span class="text-lg font-medium text-gray-900">₹{product.price}</span>
              <span class="text-sm text-gray-500 line-through">₹{product.originalPrice}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
  // Product data from server - passed via data attribute
  const productDataElement = document.getElementById('product-data');
  const productData = productDataElement ? JSON.parse(productDataElement.textContent) : {
    id: 0,
    name: '',
    sku: '',
    description: '',
    has_variants: false,
    variants: [],
    category: {}
  };

  // Use the first variant as default, or fallback to basic product data
  let currentVariantIndex = 0;
  let currentVariant = productData.variants?.[0] || {
    id: productData.id,
    sku: productData.sku,
    price: productData.price,
    discount_price: productData.discount_price,
    in_stock: productData.in_stock,
    stock_quantity: productData.stock_quantity,
    attributes: productData.attributes || {},
    images: productData.gallery || []
  };

  // Initialize quantity selector
  const quantityInput = document.getElementById('quantityInput');
  const decrementBtn = document.getElementById('decrementBtn');
  const incrementBtn = document.getElementById('incrementBtn');

  decrementBtn.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue > 1) {
      quantityInput.value = currentValue - 1;
    }
  });

  incrementBtn.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    const maxStock = currentVariant?.stock_quantity || 1;
    if (currentValue < maxStock) {
      quantityInput.value = currentValue + 1;
    }
  });

  // Initialize thumbnail image click handlers
  const thumbnailImages = document.querySelectorAll('.thumbnail-image');
  const mainImage = document.getElementById('mainImage');

  thumbnailImages.forEach(img => {
    img.addEventListener('click', () => {
      mainImage.src = img.dataset.image;
      thumbnailImages.forEach(t => t.classList.remove('ring-2', 'ring-gray-900'));
      img.classList.add('ring-2', 'ring-gray-900');
    });
  });

    // Initialize variant selection
  const variantButtons = document.querySelectorAll('.variant-btn');
  
  variantButtons.forEach((btn, index) => {
    btn.addEventListener('click', () => {
      // Update active variant
      currentVariantIndex = index;
      currentVariant = productData.variants[currentVariantIndex];
      
      // Update button styles
      variantButtons.forEach(b => {
        b.classList.remove('border-gray-900', 'bg-gray-900', 'text-white');
        b.classList.add('border-gray-300');
      });
      btn.classList.remove('border-gray-300');
      btn.classList.add('border-gray-900', 'bg-gray-900', 'text-white');
      
      // Update images
      if (currentVariant.images && currentVariant.images.length > 0) {
        mainImage.src = currentVariant.images[0];
        
        // Update thumbnails
        const thumbnailContainer = document.querySelector('.grid.grid-cols-4');
        thumbnailContainer.innerHTML = '';
        
        currentVariant.images.slice(0, 4).forEach((image, imgIndex) => {
          const thumbnail = document.createElement('img');
          thumbnail.src = image;
          thumbnail.alt = `${productData.name} thumbnail ${imgIndex + 1}`;
          thumbnail.className = 'w-full rounded-lg cursor-pointer hover:opacity-75 transition-opacity thumbnail-image';
          thumbnail.dataset.image = image;
          thumbnail.addEventListener('click', () => {
            mainImage.src = image;
            document.querySelectorAll('.thumbnail-image').forEach(t => t.classList.remove('ring-2', 'ring-gray-900'));
            thumbnail.classList.add('ring-2', 'ring-gray-900');
          });
          thumbnailContainer.appendChild(thumbnail);
        });
      }
      
      // Update price
      const priceElement = document.querySelector('.text-3xl.font-bold');
      const originalPriceElement = document.querySelector('.text-lg.text-gray-500.line-through');
      const discountElement = document.querySelector('.bg-red-100');
      
      if (currentVariant.discount_price) {
        priceElement.textContent = new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(parseFloat(currentVariant.discount_price));
        
        if (originalPriceElement) {
          originalPriceElement.textContent = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          }).format(parseFloat(currentVariant.price));
        }
        
        if (discountElement) {
          const discountPercent = Math.round(((parseFloat(currentVariant.price) - parseFloat(currentVariant.discount_price)) / parseFloat(currentVariant.price)) * 100);
          discountElement.textContent = `${discountPercent}% OFF`;
        }
      } else {
        priceElement.textContent = new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(parseFloat(currentVariant.price));
        
        if (originalPriceElement) originalPriceElement.remove();
        if (discountElement) discountElement.remove();
      }
      
      // Update stock status
      const stockElement = document.querySelector('.px-2.py-1.text-xs.font-medium.rounded-full');
      const stockQuantityElement = document.querySelector('.font-medium.text-gray-900');
      const addToCartBtn = document.getElementById('addToCartBtn');
      
      if (currentVariant.in_stock && currentVariant.stock_quantity > 0) {
        stockElement.className = 'px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800';
        stockElement.textContent = 'In Stock';
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = 'ADD TO CART';
        addToCartBtn.className = 'flex-1 bg-gray-900 text-white py-3 px-6 rounded-md hover:bg-gray-800 transition-colors font-medium';
      } else {
        stockElement.className = 'px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800';
        stockElement.textContent = 'Out of Stock';
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = 'OUT OF STOCK';
        addToCartBtn.className = 'flex-1 bg-gray-400 text-white py-3 px-6 rounded-md font-medium';
      }
      
      stockQuantityElement.textContent = `${currentVariant.stock_quantity} units`;
      quantityInput.max = currentVariant.stock_quantity;
    });
  });

  // Initialize tab navigation
  const tabLinks = document.querySelectorAll('nav a');
  tabLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      tabLinks.forEach(l => {
        l.classList.remove('border-gray-900', 'text-gray-900');
        l.classList.add('border-transparent', 'text-gray-500');
      });
      link.classList.remove('border-transparent', 'text-gray-500');
      link.classList.add('border-gray-900', 'text-gray-900');
    });
  });

  // Add to cart function
  function addToCart(product, variant, quantity) {
    if (!variant.in_stock || variant.stock_quantity <= 0) {
      alert('❌ Product is out of stock!');
      return;
    }
    
         const cartItem = {
       productId: product.id,
       productName: product.name,
       variantId: variant.id,
       variantSku: variant.sku,
       variantColor: variant.attributes?.Color,
       price: parseFloat(variant.discount_price || variant.price),
       quantity: quantity,
       image: variant.images?.[0]
     };
    
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    cart.push(cartItem);
    localStorage.setItem('cart', JSON.stringify(cart));
    alert(`✅ ${product.name} (${variant.attributes?.Color}) added to cart!`);
  }

  // Add to cart button handler
  document.getElementById('addToCartBtn').addEventListener('click', () => {
    const quantity = parseInt(quantityInput.value);
    addToCart(productData, currentVariant, quantity);
  });
</script>