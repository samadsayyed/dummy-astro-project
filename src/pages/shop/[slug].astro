---
// Import necessary components and utilities
import Layout from '../../layouts/Layout.astro';
import { productsService } from '../../api/productsService.js';
import Toast from '../../components/Toast.astro';
import ProductCard from '../../components/ProductCard.astro';

// Generate static paths for all products
export async function getStaticPaths() {
    const data = await productsService.getProducts();   
    return data.map((product: any) => {
        // Generate slug from product name or use ID if no slug exists
        const slug = product.slug || product.name?.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '') || product.id.toString();
        return {
            params: { slug },
            props: { product }
        };
    });
}

// Get the product data from props
const { product } = Astro.props;

// Fetch detailed product data from the specific API endpoint
let detailedProduct: any = product;
try {
  const apiUrl = `https://admin.bablon.in/public/api/products/slug/${product.slug}`;
  
  const response = await fetch(apiUrl);
  if (response.ok) {
    detailedProduct = await response.json();
  } else {
    console.warn("Failed to fetch detailed product data, using basic product data");
  }
} catch (error) {
  console.error("Error fetching detailed product data:", error);
}


// Helper function to format price
const formatPrice = (price) => {
  return parseFloat(price).toLocaleString('en-IN', {
    style: 'currency',
    currency: 'INR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  });
};

// Helper function to get truncated description
const getTruncatedDescription = (description) => {
  if (!description) return 'No description available for this product.';
  
  const sentences = description.split('.');
  const firstSentence = sentences[0] + (sentences[0].endsWith('.') ? '' : '.');
  
  if (firstSentence.length > 200) {
    return firstSentence.substring(0, 200) + '...';
  }
  
  return firstSentence;
};

// Use the detailed product data and get the first variant as default
const defaultVariant = detailedProduct.variants?.[0] || null;
const currentVariant = defaultVariant || {
  id: detailedProduct.id,
  sku: detailedProduct.sku,
  price: detailedProduct.price,
  discount_price: detailedProduct.discount_price,
  in_stock: detailedProduct.in_stock,
  stock_quantity: detailedProduct.stock_quantity,
  attributes: detailedProduct.attributes,
  images: detailedProduct.gallery || []
};

// Fetch related products from API - same category products
let relatedProducts: any[] = [];
try {
  const allProductsResponse = await fetch('https://admin.bablon.in/api/products');
  if (allProductsResponse.ok) {
    const allProducts = await allProductsResponse.json();
    
    // Filter products from the same category, excluding the current product
    const currentCategory = detailedProduct.category?.name || detailedProduct.category_name;
    const currentProductId = detailedProduct.id;
    
    relatedProducts = allProducts
      .filter((product: any) => {
        const productCategory = product.category?.name || product.category_name;
        return productCategory === currentCategory && product.id !== currentProductId;
      })
      .slice(0, 4); // Limit to 4 related products
      
    // If no related products found in same category, show some general products
    if (relatedProducts.length === 0) {
      relatedProducts = allProducts
        .filter((product: any) => product.id !== currentProductId)
        .slice(0, 4);
      console.log('No category-specific products found, showing general products');
    }
      
    console.log('Related products found:', relatedProducts.length, 'for category:', currentCategory);
  }
} catch (error) {
  console.error("Error fetching related products:", error);
}
---

<Layout title={`${product.name} | Bablon`}>
  <!-- Hidden element to pass product data to JavaScript -->
  <script id="product-data" type="application/json" set:html={JSON.stringify({
    id: detailedProduct.id,
    name: detailedProduct.name,
    sku: detailedProduct.sku,
    description: detailedProduct.description || '',
    has_variants: detailedProduct.has_variants,
    variants: detailedProduct.variants || [],
    category: detailedProduct.category || {}
  })}></script>
  
  <div class="container mx-auto px-4 py-8">
    <!-- Breadcrumb -->
    <nav class="text-sm mb-8">
      <ol class="flex items-center space-x-2">
        <li><a href="/" class="text-gray-500 hover:text-gray-700">Home</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><a href="/shop" class="text-gray-500 hover:text-gray-700">Shop</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><a href={`/shop/${detailedProduct.category?.name?.toLowerCase().replace(/\s+/g, '-')}`} class="text-gray-500 hover:text-gray-700">{detailedProduct.category?.name}</a></li>
        <li><span class="text-gray-500">/</span></li>
        <li><span class="text-gray-900">{detailedProduct.name}</span></li>
      </ol>
    </nav>

    <!-- Product Section -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Product Images -->
      <div class="space-y-3">
        <div class="relative">
          {currentVariant?.discount_price && (
            <>
              <span class="absolute top-4 left-4 bg-red-600 text-white px-2 py-1 text-sm font-medium z-10">HOT</span>
              <span class="absolute top-4 left-16 bg-gray-900 text-white px-2 py-1 text-sm font-medium z-10">SALE</span>
            </>
          )}
          <img 
            id="mainImage"
            src={currentVariant?.images?.[0] ?? 'https://placehold.co/600x600'} 
            alt={detailedProduct.name} 
            class="w-full h-96 object-contain rounded-lg shadow-lg" 
          />
        </div>
        
        <!-- Thumbnail Grid Gallery -->
        <div class="space-y-2">
          <div class="grid grid-cols-6 gap-2">
            {currentVariant?.images?.slice(0, 6).map((image, index) => (
              <div class="thumbnail-item relative group">
                <img 
                  src={image} 
                  alt={`${detailedProduct.name} thumbnail ${index + 1}`} 
                  class="w-full h-20 object-contain rounded-md cursor-pointer hover:opacity-75 transition-all duration-200 thumbnail-image border-2 border-transparent hover:border-gray-300" 
                  data-image={image}
                />
                {index === 0 && (
                  <div class="absolute inset-0 border-2 border-blue-500 rounded-md pointer-events-none"></div>
                )}
              </div>
            ))}
          </div>
          
          {currentVariant?.images?.length > 6 && (
            <div class="flex items-center justify-center">
              <button id="moreImagesBtn" class="bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm hover:bg-gray-200 transition-colors cursor-pointer">
                +{currentVariant.images.length - 6} more images
              </button>
            </div>
          )}
        </div>
      </div>

      <!-- Product Info -->
      <div class="space-y-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">{detailedProduct.name}</h1>
          <p class="text-sm text-gray-500">SKU: {detailedProduct.sku}</p>
        </div>
        
        <!-- <div class="flex items-center space-x-4">
          <div class="flex items-center">
            {Array.from({ length: 5 }).map((_, index) => (
              <svg class={`w-5 h-5 ${index < 4 ? 'text-yellow-400' : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <span class="ml-2 text-gray-600">(12 reviews)</span>
          </div>
          <span class={`px-2 py-1 text-xs font-medium rounded-full ${currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'In Stock' : 'Out of Stock'}
          </span>

        </div> -->

        <div class="flex items-center space-x-4">
          <span class="text-3xl font-bold text-gray-900">
            {currentVariant ? formatPrice(currentVariant.discount_price || currentVariant.price) : 'No Price Available'}
          </span>
          {currentVariant?.discount_price && (
            <span class="text-lg text-gray-500 line-through">{formatPrice(currentVariant.price)}</span>
          )}
          {currentVariant?.discount_price && (
            <span class="bg-red-100 text-red-800 px-2 py-1 text-sm font-medium rounded">
              {Math.round(((parseFloat(currentVariant.price) - parseFloat(currentVariant.discount_price)) / parseFloat(currentVariant.price)) * 100)}% OFF
            </span>
          )}
        </div>


        <p class="text-gray-600 leading-relaxed line-clamp-3">{getTruncatedDescription(detailedProduct.description)}</p>

        <!-- Variant Selection -->
        {detailedProduct.has_variants && detailedProduct.variants && detailedProduct.variants.length > 0 && (
          <div class="space-y-4">
            <h3 class="font-medium text-gray-900">Select Color:</h3>
            <div class="flex flex-wrap gap-3">
              {detailedProduct.variants.map((variant, index) => (
                <button 
                  class={`variant-btn px-4 py-2 border-2 rounded-lg text-sm font-medium transition-all hover:border-gray-900 ${index === 0 ? 'border-gray-900 bg-gray-900 text-white' : 'border-gray-300'}`}
                  data-variant-id={variant.id}
                  data-variant-index={index}
                >
                  {variant.attributes?.Color || variant.attributes?.color || variant.attributes?.color_name || variant.attributes?.Colour || `Variant ${index + 1}`}
                </button>
              ))}
            </div>
          </div>
        )}

        <!-- Stock Information -->
        <div class="bg-gray-50 p-4 rounded-lg">
          <!-- <div class="flex items-center justify-between">
            <span class="text-sm text-gray-600">Available Quantity:</span>
            <span class="font-medium text-gray-900">{currentVariant?.stock_quantity || 0} units</span>
          </div> -->
          {currentVariant?.stock_quantity > 0 && currentVariant?.stock_quantity <= 5 && (
            <div class="mt-3 p-3 bg-amber-50 border border-amber-200 rounded-lg">
              <div class="flex items-center">
                <svg class="w-5 h-5 text-amber-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
                <span class="text-sm font-medium text-amber-800">
                  Only {currentVariant.stock_quantity} left! Order soon to avoid disappointment.
                </span>
              </div>
            </div>
          )}
        </div>

        <div class="flex items-center space-x-4">
          <div class="flex items-center border rounded-md">
            <button class="px-3 py-2 border-r hover:bg-gray-100 transition-colors" id="decrementBtn">-</button>
            <input type="number" value="1" min="1" max={currentVariant?.stock_quantity || 1} class="w-16 text-center focus:outline-none" id="quantityInput" />
            <button class="px-3 py-2 border-l hover:bg-gray-100 transition-colors" id="incrementBtn">+</button>
          </div>
                  <button 
          class="flex-1 bg-gray-900 text-white py-3 px-6 rounded-md hover:bg-gray-800 disabled:bg-gray-400 transition-colors font-medium"
          disabled={!currentVariant?.in_stock || currentVariant?.stock_quantity <= 0}
          id="addToCartBtn"
        >
          {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'ADD TO CART' : 'OUT OF STOCK'}
        </button>
        </div>

        <button 
          class="w-full bg-white border-2 border-gray-900 text-gray-900 py-3 px-6 rounded-md hover:bg-gray-50 transition-colors font-medium"
          disabled={!currentVariant?.in_stock || currentVariant?.stock_quantity <= 0}
          id="buyNowBtn"
        >
          {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'BUY NOW' : 'OUT OF STOCK'}
        </button>

        <div class="flex items-center space-x-4 pt-4">
          <button id="wishlistBtn" class="flex items-center text-gray-500 hover:text-gray-700 transition-colors wishlist-btn">
            <svg class="w-5 h-5 mr-1 wishlist-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <span class="wishlist-text">Add to wishlist</span>
          </button>
          <button class="flex items-center text-gray-500 hover:text-gray-700 transition-colors">
            <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
            </svg>
            Share
          </button>
        </div>
      </div>
    </div>

    <!-- Product Details Tabs -->
    <div class="mt-16">
      <div class="border-b">
        <nav class="-mb-px flex space-x-8">
          <a href="#details" class="border-b-2 border-gray-900 py-4 px-1 text-sm font-medium text-gray-900">Details</a>
          <a href="#specifications" class="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300">Specifications</a>
          <a href="#delivery" class="border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-300">Delivery & Returns</a>
        </nav>
      </div>

      <div class="py-8">
        <div id="details" class="space-y-6">
          <div>
            <h3 class="text-lg font-semibold mb-4">Product Description</h3>
            <div class="text-gray-600 leading-relaxed space-y-4">
              {/* @ts-ignore */}
              {detailedProduct.description ? (
                // @ts-ignore
                detailedProduct.description.split('\n').map((paragraph: string, index: number) => (
                  paragraph.trim() && <p>{paragraph.trim()}</p>
                ))
              ) : (
                <p>No description available for this product.</p>
              )}
            </div>
          </div>
          
          
        </div>

        <div id="specifications" class="space-y-6 hidden">
          <div>
            <h3 class="text-lg font-semibold mb-4">Product Specifications</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              {currentVariant?.attributes && Object.entries(currentVariant.attributes).map(([key, value]) => (
                <div class="border-b border-gray-200 pb-3">
                  <dt class="text-sm font-medium text-gray-900 capitalize">{key.replace(/_/g, ' ')}</dt>
                  <dd class="text-sm text-gray-600 mt-1">{value}</dd>
                </div>
              ))}
              <div class="border-b border-gray-200 pb-3">
                <dt class="text-sm font-medium text-gray-900">SKU</dt>
                <dd class="text-sm text-gray-600 mt-1">{currentVariant?.sku || detailedProduct.sku}</dd>
              </div>
              <!-- <div class="border-b border-gray-200 pb-3">
                <dt class="text-sm font-medium text-gray-900">Stock Quantity</dt>
                <dd class="text-sm text-gray-600 mt-1">{currentVariant?.stock_quantity || 0} units</dd>
              </div> -->
              <div class="border-b border-gray-200 pb-3">
                <dt class="text-sm font-medium text-gray-900">Availability</dt>
                <dd class="text-sm text-gray-600 mt-1">
                  {currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'In Stock' : 'Out of Stock'}
                </dd>
              </div>
            </div>
          </div>
        </div>

        <div id="delivery" class="space-y-6 hidden">
          <div>
            <h3 class="text-lg font-semibold mb-4">Delivery Information</h3>
            <div class="space-y-4">
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Standard Delivery</h4>
                <p class="text-sm text-gray-600">Free delivery on orders above ₹999. Standard delivery takes 3-5 business days.</p>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Express Delivery</h4>
                <p class="text-sm text-gray-600">Available for ₹199. Delivery within 1-2 business days.</p>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Installation</h4>
                <p class="text-sm text-gray-600">Professional installation available for select items. Contact us for details.</p>
              </div>
            </div>
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-4">Returns & Exchanges</h3>
            <div class="space-y-4">
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Return Policy</h4>
                <p class="text-sm text-gray-600">30-day return policy for unused items in original packaging. Return shipping costs apply.</p>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Exchange Policy</h4>
                <p class="text-sm text-gray-600">Free exchanges for defective items within 7 days of delivery.</p>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <h4 class="font-medium text-gray-900 mb-2">Warranty</h4>
                <p class="text-sm text-gray-600">1-year manufacturer warranty on all products. Extended warranty available.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Related Products -->
    <div class="mt-16">
      <h2 class="text-2xl font-bold mb-8">RELATED PRODUCTS</h2>
      {relatedProducts.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
          {relatedProducts.map((product: any) => (
            <ProductCard product={product} />
          ))}
        </div>
      ) : (
        <div class="text-center py-8">
          <p class="text-gray-500">No related products found.</p>
        </div>
      )}
    </div>
  </div>

  <!-- Image Gallery Modal -->
  <div id="imageModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-7xl w-full max-h-[95vh] overflow-hidden">
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-4 border-b">
        <h3 class="text-lg font-semibold text-gray-900">Product Images</h3>
        <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Modal Content -->
      <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <!-- Main Image -->
          <div class="space-y-4">
            <div class="relative">
              <img 
                id="modalMainImage"
                src={currentVariant?.images?.[0] ?? 'https://placehold.co/600x600'} 
                alt={detailedProduct.name} 
                class="w-full h-96 object-contain rounded-lg shadow-lg" 
              />
            </div>
          </div>
          
          <!-- Thumbnail Grid -->
          <div class="space-y-4">
            <h4 class="text-sm font-medium text-gray-900">All Images</h4>
            <div class="grid grid-cols-3 gap-2">
              {currentVariant?.images?.map((image, index) => (
                <div class="modal-thumbnail-item relative group cursor-pointer">
                  <img 
                    src={image} 
                    alt={`${detailedProduct.name} thumbnail ${index + 1}`} 
                    class="w-full h-20 object-contain rounded-md hover:opacity-75 transition-all duration-200 modal-thumbnail-image border-2 border-transparent hover:border-gray-300" 
                    data-image={image}
                  />
                  {index === 0 && (
                    <div class="absolute inset-0 border-2 border-blue-500 rounded-md pointer-events-none"></div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>



  <style>

    @keyframes refined-bounce {
      0%, 20%, 53%, 80%, 100% {
        transform: translate3d(0,0,0);
      }
      40%, 43% {
        transform: translate3d(0, -4px, 0);
      }
      70% {
        transform: translate3d(0, -2px, 0);
      }
      90% {
        transform: translate3d(0, -1px, 0);
      }
    }

    /* Cart icon refined bounce animation */
    .cart-bounce {
      animation: refined-bounce 0.8s ease-in-out;
    }

    /* Thumbnail Grid Styles */
    .thumbnail-item {
      transition: all 0.2s ease;
    }

    .thumbnail-item:hover {
      transform: translateY(-1px);
    }

    /* Active thumbnail indicator */
    .thumbnail-item.active img {
      border-color: #3b82f6;
    }

    /* Modal thumbnail styles */
    .modal-thumbnail-item {
      transition: all 0.2s ease;
    }

    .modal-thumbnail-item:hover {
      transform: translateY(-1px);
    }

    .modal-thumbnail-item.active img {
      border-color: #3b82f6;
    }

    /* Line clamp utility */
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</Layout>

<Toast />

<script>
  // Wishlist functionality
  function getWishlist() {
    const wishlist = JSON.parse(localStorage.getItem('wishlist')) || { items: [], totalItems: 0 };
    // Handle both array format and object format with items property
    return Array.isArray(wishlist) ? { items: wishlist, totalItems: wishlist.length } : wishlist;
  }

  function saveWishlist(wishlist) {
    // Ensure we're saving in object format for consistency with ProductCard
    const wishlistObject = Array.isArray(wishlist) ? { items: wishlist, totalItems: wishlist.length } : wishlist;
    localStorage.setItem('wishlist', JSON.stringify(wishlistObject));
  }

  function isInWishlist(productId) {
    const wishlist = getWishlist();
    return wishlist.items && wishlist.items.some(item => item.id === productId);
  }

  function addToWishlist(product) {
    let wishlist = getWishlist();
    
    // Ensure wishlist.items exists
    if (!wishlist.items) {
      wishlist.items = [];
    }
    
    const existingItem = wishlist.items.find(item => item.id === product.id);
    
    if (!existingItem) {
      wishlist.items.push({
        id: product.id,
        name: product.name,
        slug: product.slug,
        price: currentVariant.discount_price || currentVariant.price,
        discount_price: currentVariant.discount_price,
        image: currentVariant.images && currentVariant.images[0] ? currentVariant.images[0] : "https://placehold.co/400x400",
        sku: currentVariant.sku,
        in_stock: currentVariant.in_stock,
        stock_quantity: currentVariant.stock_quantity,
        attributes: currentVariant.attributes || {},
        variantColor: currentVariant.attributes?.Color || currentVariant.attributes?.color || currentVariant.attributes?.color_name || currentVariant.attributes?.Colour
      });
      
      // Update wishlist totals
      wishlist.totalItems = wishlist.items.length;
      saveWishlist(wishlist);
      showToast(`${product.name} added to wishlist`, "success");
      
      // Dispatch custom event for wishlist updates
      window.dispatchEvent(new CustomEvent("wishlist-updated", { detail: wishlist }));
    }
  }

  function removeFromWishlist(productId) {
    let wishlist = getWishlist();
    
    // Ensure wishlist.items exists
    if (!wishlist.items) {
      wishlist.items = [];
    }
    
    wishlist.items = wishlist.items.filter(item => item.id !== productId);
    wishlist.totalItems = wishlist.items.length;
    saveWishlist(wishlist);
    showToast("Item removed from wishlist", "success");
    
    // Dispatch custom event for wishlist updates
    window.dispatchEvent(new CustomEvent("wishlist-updated", { detail: wishlist }));
  }

  function updateWishlistButton() {
    const wishlistBtn = document.getElementById('wishlistBtn');
    if (!wishlistBtn) return;
    
    const wishlistIcon = wishlistBtn.querySelector('.wishlist-icon');
    const wishlistText = wishlistBtn.querySelector('.wishlist-text');
    
    if (isInWishlist(productData.id)) {
      wishlistBtn.classList.add('text-red-500', 'hover:text-red-700');
      wishlistBtn.classList.remove('text-gray-500', 'hover:text-gray-700');
      wishlistIcon.classList.add('fill-current');
      wishlistText.textContent = 'Remove from wishlist';
    } else {
      wishlistBtn.classList.remove('text-red-500', 'hover:text-red-700');
      wishlistBtn.classList.add('text-gray-500', 'hover:text-gray-700');
      wishlistIcon.classList.remove('fill-current');
      wishlistText.textContent = 'Add to wishlist';
    }
  }

  // Product data from server - passed via data attribute
  const productDataElement = document.getElementById('product-data');
  const productData = productDataElement ? JSON.parse(productDataElement.textContent) : {
    id: 0,
    name: '',
    sku: '',
    description: '',
    has_variants: false,
    variants: [],
    category: {}
  };

  // Use the first variant as default, or fallback to basic product data
  let currentVariantIndex = 0;
  let currentVariant = productData.variants?.[0] || {
    id: productData.id,
    sku: productData.sku,
    price: productData.price,
    discount_price: productData.discount_price,
    in_stock: productData.in_stock,
    stock_quantity: productData.stock_quantity,
    attributes: productData.attributes || {},
    images: productData.gallery || []
  };

  // Initialize quantity selector
  const quantityInput = document.getElementById('quantityInput');
  const decrementBtn = document.getElementById('decrementBtn');
  const incrementBtn = document.getElementById('incrementBtn');

  // Function to get current cart quantity for this variant
  function getCurrentCartQuantity() {
    const cart = JSON.parse(localStorage.getItem("cart")) || { items: [] };
    const variantId = currentVariant.id || `${productData.id}-${currentVariant.attributes?.Color || 'default'}`;
    const existingItem = cart.items.find(item => item.id === variantId);
    return existingItem ? existingItem.quantity : 0;
  }

  // Function to update quantity display and button states
  function updateQuantityDisplay() {
    const currentQuantity = getCurrentCartQuantity();
    quantityInput.value = currentQuantity;
    
    // Update decrement button
    if (currentQuantity <= 0) {
      decrementBtn.disabled = true;
      decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
    } else {
      decrementBtn.disabled = false;
      decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    }
    
    // Update increment button
    const maxStock = currentVariant?.stock_quantity || 1;
    if (currentQuantity >= maxStock) {
      incrementBtn.disabled = true;
      incrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
    } else {
      incrementBtn.disabled = false;
      incrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
    }
  }

  // Add to cart function for increment button
  function addOneToCart() {
    if (!currentVariant.in_stock || currentVariant.stock_quantity <= 0) {
      showToast("Product is out of stock", "error");
      return;
    }

    const currentQuantity = getCurrentCartQuantity();
    const maxStock = currentVariant.stock_quantity;
    
    if (currentQuantity >= maxStock) {
      showToast(`Maximum stock limit reached (${maxStock})`, "error");
      return;
    }

    // Use the proper cart structure
    let cart = JSON.parse(localStorage.getItem("cart")) || {
      items: [],
      totalItems: 0,
      subtotal: 0,
    };

    if (!cart.items) {
      cart.items = [];
    }

    const variantId = currentVariant.id || `${productData.id}-${currentVariant.attributes?.Color || 'default'}`;
    const existingItemIndex = cart.items.findIndex(item => item.id === variantId);

    if (existingItemIndex >= 0) {
      // Update quantity if item already exists
      cart.items[existingItemIndex].quantity += 1;
    } else {
      // Add new item
      cart.items.push({
        id: variantId,
        name: productData.name,
        price: currentVariant.discount_price || currentVariant.price,
        image: currentVariant.images && currentVariant.images[0] ? currentVariant.images[0] : "https://placehold.co/400x400",
        quantity: 1,
        variantColor: currentVariant.attributes?.Color,
        variantSku: currentVariant.sku
      });
    }

    // Update cart totals
    cart.totalItems = cart.items.reduce((total, item) => total + item.quantity, 0);
    cart.subtotal = cart.items.reduce((total, item) => total + parseFloat(item.price) * item.quantity, 0);

    localStorage.setItem("cart", JSON.stringify(cart));
    
    // Update display
    updateQuantityDisplay();
    
    // Show success message
    showToast(`${productData.name} added to cart`, "success");
    
    // Animate cart icon if it exists
    const cartIcon = document.querySelector('.cart-icon');
    if (cartIcon) {
      cartIcon.classList.add('cart-bounce');
      setTimeout(() => cartIcon.classList.remove('cart-bounce'), 800);
    }
    
    // Dispatch custom event for cart updates
    window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
  }

  // Remove from cart function for decrement button
  function removeOneFromCart() {
    const currentQuantity = getCurrentCartQuantity();
    
    if (currentQuantity <= 0) {
      showToast("No items in cart to remove", "error");
      return;
    }

    let cart = JSON.parse(localStorage.getItem("cart")) || { items: [] };
    const variantId = currentVariant.id || `${productData.id}-${currentVariant.attributes?.Color || 'default'}`;
    const existingItemIndex = cart.items.findIndex(item => item.id === variantId);

    if (existingItemIndex >= 0) {
      if (cart.items[existingItemIndex].quantity > 1) {
        // Decrease quantity
        cart.items[existingItemIndex].quantity -= 1;
      } else {
        // Remove item completely
        cart.items.splice(existingItemIndex, 1);
      }

      // Update cart totals
      cart.totalItems = cart.items.reduce((total, item) => total + item.quantity, 0);
      cart.subtotal = cart.items.reduce((total, item) => total + parseFloat(item.price) * item.quantity, 0);

      localStorage.setItem("cart", JSON.stringify(cart));
      
      // Update display
      updateQuantityDisplay();
      
      // Show success message
      showToast(`${productData.name} removed from cart`, "success");
      
      // Dispatch custom event for cart updates
      window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
    }
  }

  // Event listeners for plus and minus buttons
  decrementBtn.addEventListener('click', removeOneFromCart);
  incrementBtn.addEventListener('click', addOneToCart);

  // Handle direct input changes (optional - for manual quantity setting)
  quantityInput.addEventListener('input', () => {
    const newQuantity = parseInt(quantityInput.value) || 0;
    const maxStock = currentVariant?.stock_quantity || 1;
    
    if (newQuantity < 0) {
      quantityInput.value = 0;
    } else if (newQuantity > maxStock) {
      quantityInput.value = maxStock;
    }
    
    // Update cart with new quantity
    const cart = JSON.parse(localStorage.getItem("cart")) || { items: [] };
    const variantId = currentVariant.id || `${productData.id}-${currentVariant.attributes?.Color || 'default'}`;
    const existingItemIndex = cart.items.findIndex(item => item.id === variantId);
    
    if (newQuantity === 0) {
      // Remove item if quantity is 0
      if (existingItemIndex >= 0) {
        cart.items.splice(existingItemIndex, 1);
      }
    } else {
      // Update or add item
      if (existingItemIndex >= 0) {
        cart.items[existingItemIndex].quantity = newQuantity;
      } else {
        cart.items.push({
          id: variantId,
          name: productData.name,
          price: currentVariant.discount_price || currentVariant.price,
          image: currentVariant.images && currentVariant.images[0] ? currentVariant.images[0] : "https://placehold.co/400x400",
          quantity: newQuantity,
          variantColor: currentVariant.attributes?.Color,
          variantSku: currentVariant.sku
        });
      }
    }
    
    // Update cart totals
    cart.totalItems = cart.items.reduce((total, item) => total + item.quantity, 0);
    cart.subtotal = cart.items.reduce((total, item) => total + parseFloat(item.price) * item.quantity, 0);
    
    localStorage.setItem("cart", JSON.stringify(cart));
    updateQuantityDisplay();
    
    // Dispatch custom event for cart updates
    window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
  });

  // Initialize display
  updateQuantityDisplay();
  
  // Initialize specifications section with default variant
  updateSpecificationsSection();
  
  // Initialize wishlist button state
  updateWishlistButton();

  // Initialize thumbnail grid functionality
  const mainImage = document.getElementById('mainImage');
  let currentImageIndex = 0;

  // Thumbnail click handler
  function handleThumbnailClick(img, index) {
    mainImage.src = img.dataset.image;
    currentImageIndex = index;
    
    // Update active thumbnail
    document.querySelectorAll('.thumbnail-item').forEach(item => {
      item.classList.remove('active');
    });
    img.closest('.thumbnail-item').classList.add('active');
    
    // Update border indicator
    document.querySelectorAll('.thumbnail-image').forEach(t => {
      t.classList.remove('ring-2', 'ring-blue-500');
      t.classList.add('border-transparent');
    });
    img.classList.add('ring-2', 'ring-blue-500');
    img.classList.remove('border-transparent');
  }

  // Initialize thumbnail click handlers
  document.querySelectorAll('.thumbnail-image').forEach((img, index) => {
    img.addEventListener('click', () => handleThumbnailClick(img, index));
  });

  // Function to update modal content
  function updateModalContent() {
    const modalMainImage = document.getElementById('modalMainImage');
    const modalGrid = document.querySelector('#imageModal .grid');
    
    if (!modalGrid) return;
    
    // Update modal main image
    if (modalMainImage && currentVariant.images && currentVariant.images.length > 0) {
      modalMainImage.src = currentVariant.images[0];
    }
    
    // Update modal thumbnails
    modalGrid.innerHTML = '';
    
    currentVariant.images.forEach((image, index) => {
      const modalThumbnailItem = document.createElement('div');
      modalThumbnailItem.className = 'modal-thumbnail-item relative group cursor-pointer';
      
      const img = document.createElement('img');
      img.src = image;
      img.alt = `${productData.name} thumbnail ${index + 1}`;
      img.className = 'w-full h-20 object-cover rounded-md hover:opacity-75 transition-all duration-200 modal-thumbnail-image border-2 border-transparent hover:border-gray-300';
      img.dataset.image = image;
      
      modalThumbnailItem.appendChild(img);
      
      // Add active indicator for first image
      if (index === 0) {
        const activeIndicator = document.createElement('div');
        activeIndicator.className = 'absolute inset-0 border-2 border-blue-500 rounded-md pointer-events-none';
        modalThumbnailItem.appendChild(activeIndicator);
        modalThumbnailItem.classList.add('active');
      }
      
      modalGrid.appendChild(modalThumbnailItem);
    });
  }

    // Function to update specifications section
  function updateSpecificationsSection() {
    const specificationsContainer = document.getElementById('specifications');
    if (!specificationsContainer) return;
    
    // Clear existing content
    const existingContent = specificationsContainer.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.gap-6');
    if (existingContent) {
      existingContent.innerHTML = '';
    }
    
    // Add variant attributes
    if (currentVariant?.attributes) {
      Object.entries(currentVariant.attributes).forEach(([key, value]) => {
        const attributeDiv = document.createElement('div');
        attributeDiv.className = 'border-b border-gray-200 pb-3';
        attributeDiv.innerHTML = `
          <dt class="text-sm font-medium text-gray-900 capitalize">${key.replace(/_/g, ' ')}</dt>
          <dd class="text-sm text-gray-600 mt-1">${value}</dd>
        `;
        existingContent.appendChild(attributeDiv);
      });
    }
    
    // Add SKU
    const skuDiv = document.createElement('div');
    skuDiv.className = 'border-b border-gray-200 pb-3';
    skuDiv.innerHTML = `
      <dt class="text-sm font-medium text-gray-900">SKU</dt>
      <dd class="text-sm text-gray-600 mt-1">${currentVariant?.sku || 'N/A'}</dd>
    `;
    existingContent.appendChild(skuDiv);
    
    // Add Stock Quantity
    const stockDiv = document.createElement('div');
    stockDiv.className = 'border-b border-gray-200 pb-3';
    // stockDiv.innerHTML = `
    //   <dt class="text-sm font-medium text-gray-900">Stock Quantity</dt>
    //   <dd class="text-sm text-gray-600 mt-1">${currentVariant?.stock_quantity || 0} units</dd>
    // `;
    existingContent.appendChild(stockDiv);
    
    // Add Availability
    const availabilityDiv = document.createElement('div');
    availabilityDiv.className = 'border-b border-gray-200 pb-3';
    availabilityDiv.innerHTML = `
      <dt class="text-sm font-medium text-gray-900">Availability</dt>
      <dd class="text-sm text-gray-600 mt-1">
        ${currentVariant?.in_stock && currentVariant?.stock_quantity > 0 ? 'In Stock' : 'Out of Stock'}
      </dd>
    `;
    existingContent.appendChild(availabilityDiv);
  }

  // Initialize variant selection
  const variantButtons = document.querySelectorAll('.variant-btn');
  
  variantButtons.forEach((btn, index) => {
    btn.addEventListener('click', () => {
      // Update active variant
      currentVariantIndex = index;
      currentVariant = productData.variants[currentVariantIndex];
      
      // Update button styles
      variantButtons.forEach(b => {
        b.classList.remove('border-gray-900', 'bg-gray-900', 'text-white');
        b.classList.add('border-gray-300');
      });
      btn.classList.remove('border-gray-300');
      btn.classList.add('border-gray-900', 'bg-gray-900', 'text-white');
      
      // Update images
      if (currentVariant.images && currentVariant.images.length > 0) {
        mainImage.src = currentVariant.images[0];
        
        // Update thumbnails
        const thumbnailGrid = document.querySelector('.grid.grid-cols-6');
        thumbnailGrid.innerHTML = '';
        
        currentVariant.images.slice(0, 6).forEach((image, imgIndex) => {
          const thumbnailItem = document.createElement('div');
          thumbnailItem.className = 'thumbnail-item relative group';
          
          const thumbnail = document.createElement('img');
          thumbnail.src = image;
          thumbnail.alt = `${productData.name} thumbnail ${imgIndex + 1}`;
          thumbnail.className = 'w-full h-20 object-cover rounded-md cursor-pointer hover:opacity-75 transition-all duration-200 thumbnail-image border-2 border-transparent hover:border-gray-300';
          thumbnail.dataset.image = image;
          thumbnail.addEventListener('click', () => handleThumbnailClick(thumbnail, imgIndex));
          
          thumbnailItem.appendChild(thumbnail);
          
          // Add active indicator for first image
          if (imgIndex === 0) {
            const activeIndicator = document.createElement('div');
            activeIndicator.className = 'absolute inset-0 border-2 border-blue-500 rounded-md pointer-events-none';
            thumbnailItem.appendChild(activeIndicator);
            thumbnailItem.classList.add('active');
          }
          
          thumbnailGrid.appendChild(thumbnailItem);
        });
        
        // Update "more images" indicator
        const moreImagesIndicator = document.querySelector('.bg-gray-100.text-gray-600');
        if (currentVariant.images.length > 6) {
          if (moreImagesIndicator) {
            moreImagesIndicator.textContent = `+${currentVariant.images.length - 6} more images`;
          } else {
            const newIndicator = document.createElement('div');
            newIndicator.className = 'bg-gray-100 text-gray-600 px-3 py-1 rounded-full text-sm';
            newIndicator.textContent = `+${currentVariant.images.length - 6} more images`;
            thumbnailGrid.parentNode.appendChild(newIndicator);
          }
        } else if (moreImagesIndicator) {
          moreImagesIndicator.remove();
        }
        
        // Update modal content for new variant
        updateModalContent();
      }
      
      // Update price
      const priceElement = document.querySelector('.flex.items-center.space-x-4 .text-3xl.font-bold');
      const originalPriceElement = document.querySelector('.text-lg.text-gray-500.line-through');
      const discountElement = document.querySelector('.bg-red-100');
      
      if (currentVariant.discount_price) {
        priceElement.textContent = new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(parseFloat(currentVariant.discount_price));
        
        if (originalPriceElement) {
          originalPriceElement.textContent = new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
          }).format(parseFloat(currentVariant.price));
        }
        
        if (discountElement) {
          const discountPercent = Math.round(((parseFloat(currentVariant.price) - parseFloat(currentVariant.discount_price)) / parseFloat(currentVariant.price)) * 100);
          discountElement.textContent = `${discountPercent}% OFF`;
        }
      } else {
        priceElement.textContent = new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(parseFloat(currentVariant.price));
        
        if (originalPriceElement) originalPriceElement.remove();
        if (discountElement) discountElement.remove();
      }
      
              // Update stock status
        const stockElement = document.querySelector('.px-2.py-1.text-xs.font-medium.rounded-full');
        const stockQuantityElement = document.querySelector('.font-medium.text-gray-900');
        const addToCartBtn = document.getElementById('addToCartBtn');
        const buyNowBtn = document.getElementById('buyNowBtn');
        const stockInfoContainer = document.querySelector('.bg-gray-50.p-4.rounded-lg');
      
      if (currentVariant.in_stock && currentVariant.stock_quantity > 0) {
        if (stockElement) {
          stockElement.className = 'px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800';
          stockElement.textContent = 'In Stock';
        }
        if (addToCartBtn) {
          addToCartBtn.disabled = false;
          addToCartBtn.textContent = 'ADD TO CART';
          addToCartBtn.className = 'flex-1 bg-gray-900 text-white py-3 px-6 rounded-md hover:bg-gray-800 transition-colors font-medium';
        }
        if (buyNowBtn) {
          buyNowBtn.disabled = false;
          buyNowBtn.textContent = 'BUY NOW';
          buyNowBtn.className = 'w-full bg-white border-2 border-gray-900 text-gray-900 py-3 px-6 rounded-md hover:bg-gray-50 transition-colors font-medium';
        }
      } else {
        if (stockElement) {
          stockElement.className = 'px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800';
          stockElement.textContent = 'Out of Stock';
        }
        if (addToCartBtn) {
          addToCartBtn.disabled = true;
          addToCartBtn.textContent = 'OUT OF STOCK';
          addToCartBtn.className = 'flex-1 bg-gray-400 text-white py-3 px-6 rounded-md font-medium';
        }
        if (buyNowBtn) {
          buyNowBtn.disabled = true;
          buyNowBtn.textContent = 'OUT OF STOCK';
          buyNowBtn.className = 'w-full bg-gray-400 text-white py-3 px-6 rounded-md font-medium';
        }
      }
      
      // if (stockQuantityElement) {
      //   stockQuantityElement.textContent = `${currentVariant.stock_quantity} units`;
      // }
      if (quantityInput) {
        quantityInput.max = currentVariant.stock_quantity;
      }
      
      // Update stock warning
      if (stockInfoContainer) {
        const existingWarning = stockInfoContainer.querySelector('.bg-amber-50');
        if (existingWarning) {
          existingWarning.remove();
        }
        
        if (currentVariant.stock_quantity > 0 && currentVariant.stock_quantity <= 5) {
          const warningDiv = document.createElement('div');
          warningDiv.className = 'mt-3 p-3 bg-amber-50 border border-amber-200 rounded-lg';
          warningDiv.innerHTML = `
            <div class="flex items-center">
              <svg class="w-5 h-5 text-amber-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
              </svg>
              <span class="text-sm font-medium text-amber-800">
                Only ${currentVariant.stock_quantity} left! Order soon to avoid disappointment.
              </span>
            </div>
          `;
          stockInfoContainer.appendChild(warningDiv);
        }
      }
      
      // Update quantity display when variant changes
      updateQuantityDisplay();
      
      // Update specifications section with new variant data
      updateSpecificationsSection();
    });
  });

  // Initialize tab navigation
  const tabLinks = document.querySelectorAll('.mt-16 .border-b nav a');
  const tabContents = document.querySelectorAll('#details, #specifications, #delivery');
  
  function showTab(tabId) {
    // Hide all tab contents
    tabContents.forEach(content => {
      content.classList.add('hidden');
    });
    
    // Show selected tab content
    const selectedContent = document.getElementById(tabId);
    if (selectedContent) {
      selectedContent.classList.remove('hidden');
    }
    
    // Update tab link styles
    tabLinks.forEach(link => {
      link.classList.remove('border-gray-900', 'text-gray-900');
      link.classList.add('border-transparent', 'text-gray-500');
    });
    
    // Highlight active tab
    const activeLink = document.querySelector(`a[href="#${tabId}"]`);
    if (activeLink) {
      activeLink.classList.remove('border-transparent', 'text-gray-500');
      activeLink.classList.add('border-gray-900', 'text-gray-900');
    }
  }
  
  tabLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const tabId = link.getAttribute('href').substring(1);
      showTab(tabId);
    });
  });
  
  // Show details tab by default
  showTab('details');

  // Add to cart function - using same logic as ProductCard
  function addToCart(product, variant, quantity, buttonElement) {
    if (!variant.in_stock || variant.stock_quantity <= 0) {
      showToast("Product is out of stock", "error");
      return;
    }

    // Disable button and show loading state
    buttonElement.disabled = true;
    buttonElement.style.transform = "scale(0.98)";

    // Use the proper cart structure
    let cart = JSON.parse(localStorage.getItem("cart")) || {
      items: [],
      totalItems: 0,
      subtotal: 0,
    };

    // Ensure cart.items exists
    if (!cart.items) {
      cart.items = [];
    }

    // Create a unique identifier for the variant
    const variantId = variant.id || `${product.id}-${variant.attributes?.Color || 'default'}`;
    
    const existingItemIndex = cart.items.findIndex(
      (item) => item.id === variantId
    );

    if (existingItemIndex >= 0) {
      // Update quantity if item already exists
      cart.items[existingItemIndex].quantity += quantity;
    } else {
      // Add new item
      cart.items.push({
        id: variantId,
        name: product.name,
        price: variant.discount_price || variant.price,
        image: variant.images && variant.images[0] ? variant.images[0] : "https://placehold.co/400x400",
        quantity: quantity,
        variantColor: variant.attributes?.Color,
        variantSku: variant.sku
      });
    }

    // Update cart totals
    cart.totalItems = cart.items.reduce(
      (total, item) => total + item.quantity,
      0
    );
    cart.subtotal = cart.items.reduce(
      (total, item) => total + parseFloat(item.price) * item.quantity,
      0
    );

    localStorage.setItem("cart", JSON.stringify(cart));

    // Animate button success state
    setTimeout(() => {
      buttonElement.style.transform = "scale(1.02)";
      buttonElement.style.backgroundColor = "#374151";
      
      // Show toast notification
      showToast(`${product.name} added to cart`, "success");
      
      // Animate cart icon if it exists
      const cartIcon = document.querySelector('.cart-icon');
      if (cartIcon) {
        cartIcon.classList.add('cart-bounce');
        setTimeout(() => cartIcon.classList.remove('cart-bounce'), 800);
      }
      
      // Dispatch custom event for cart updates
      window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
    }, 200);

    // Reset button state after animation
    setTimeout(() => {
      buttonElement.disabled = false;
      buttonElement.style.transform = '';
      buttonElement.style.backgroundColor = '';
    }, 2500);
  }

  function showToast(message, type = "success") {
    // Use the global custom toast component
    if (window.customToast) {
      window.customToast.show(message, type, 4000);
    }
  }

  // Add to cart button handler - adds the selected variant to cart
  document.getElementById('addToCartBtn').addEventListener('click', () => {
    // Use the current selected variant for adding to cart
    addToCart(productData, currentVariant, 1, document.getElementById('addToCartBtn'));
  });

  // Buy Now button handler - adds to cart and redirects to checkout
  document.getElementById('buyNowBtn').addEventListener('click', () => {
    if (!currentVariant.in_stock || currentVariant.stock_quantity <= 0) {
      showToast("Product is out of stock", "error");
      return;
    }

    // Get the current quantity from the input
    const quantity = parseInt(document.getElementById('quantityInput').value) || 1;
    
    // Use the proper cart structure
    let cart = JSON.parse(localStorage.getItem("cart")) || {
      items: [],
      totalItems: 0,
      subtotal: 0,
    };

    // Ensure cart.items exists
    if (!cart.items) {
      cart.items = [];
    }

    // Create a unique identifier for the variant
    const variantId = currentVariant.id || `${productData.id}-${currentVariant.attributes?.Color || 'default'}`;
    
    // Check if item already exists in cart
    const existingItemIndex = cart.items.findIndex(item => item.id === variantId);
    
    if (existingItemIndex >= 0) {
      // Item already exists, just redirect to checkout
      showToast("Redirecting to checkout...", "success");
    } else {
      // Add new item to cart
      cart.items.push({
        id: variantId,
        name: productData.name,
        price: currentVariant.discount_price || currentVariant.price,
        image: currentVariant.images && currentVariant.images[0] ? currentVariant.images[0] : "https://placehold.co/400x400",
        quantity: quantity,
        variantColor: currentVariant.attributes?.Color,
        variantSku: currentVariant.sku
      });

      // Update cart totals
      cart.totalItems = cart.items.reduce(
        (total, item) => total + item.quantity,
        0
      );
      cart.subtotal = cart.items.reduce(
        (total, item) => total + parseFloat(item.price) * item.quantity,
        0
      );

      localStorage.setItem("cart", JSON.stringify(cart));
      
      // Show success message
      showToast(`${productData.name} added to cart`, "success");
      
      // Dispatch custom event for cart updates
      window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
    }
    
    // Redirect to checkout after a short delay
    setTimeout(() => {
      window.location.href = '/checkout';
    }, 500);
  });

  // Wishlist button handler
  document.getElementById('wishlistBtn').addEventListener('click', () => {
    if (isInWishlist(productData.id)) {
      removeFromWishlist(productData.id);
    } else {
      addToWishlist(productData);
    }
    updateWishlistButton();
  });

  // Listen for wishlist updates from other components
  window.addEventListener('wishlist-updated', function() {
    updateWishlistButton();
  });

  // Image Gallery Modal functionality
  const imageModal = document.getElementById('imageModal');
  const moreImagesBtn = document.getElementById('moreImagesBtn');
  const closeModal = document.getElementById('closeModal');

  // Open modal
  if (moreImagesBtn) {
    moreImagesBtn.addEventListener('click', () => {
      imageModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
    });
  }

  // Close modal
  if (closeModal) {
    closeModal.addEventListener('click', () => {
      imageModal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    });
  }

  // Close modal when clicking outside
  imageModal.addEventListener('click', (e) => {
    if (e.target === imageModal) {
      imageModal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !imageModal.classList.contains('hidden')) {
      imageModal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });

  // Handle modal thumbnail clicks
  document.addEventListener('click', (e) => {
    if (e.target.closest('.modal-thumbnail-item')) {
      const clickedImage = e.target.closest('.modal-thumbnail-item').querySelector('img');
      const imageSrc = clickedImage.dataset.image;
      
      // Update modal main image
      const modalMainImage = document.getElementById('modalMainImage');
      if (modalMainImage) {
        modalMainImage.src = imageSrc;
      }
      
      // Update active thumbnail in modal
      document.querySelectorAll('.modal-thumbnail-item').forEach(item => {
        item.classList.remove('active');
      });
      clickedImage.closest('.modal-thumbnail-item').classList.add('active');
      
      // Update border indicators in modal
      document.querySelectorAll('.modal-thumbnail-image').forEach(t => {
        t.classList.remove('ring-2', 'ring-blue-500');
        t.classList.add('border-transparent');
      });
      clickedImage.classList.add('ring-2', 'ring-blue-500');
      clickedImage.classList.remove('border-transparent');
    }
  });
</script>