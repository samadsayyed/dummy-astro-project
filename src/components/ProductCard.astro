---
interface Props {
  product: {
    id: number;
    name: string;
    slug: string;
    price: string;
    discount_price?: string;
    gallery?: string[];
    in_stock: boolean;
    stock_quantity: number;
    attributes?: Record<string, string>;
  };
}

const { product } = Astro.props;

// Helper function for price formatting
const formatPrice = (price: string) => {
  return parseFloat(price).toLocaleString("en-IN", {
    style: "currency",
    currency: "INR",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  });
};

// Helper to get first image from product gallery
const getFirstImage = (product: Props["product"]) => {
  return (
    (product.gallery && product.gallery[0]) || "https://placehold.co/400x400"
  );
};
---

<div class="relative bg-white flex flex-col group border border-gray-200 transition-all duration-300 hover:shadow-xl hover:border-gray-300">
  <!-- Product Image -->
  <div class="relative overflow-hidden">
    <!-- Sale Tag - Monochromatic -->
    {
      product.in_stock &&
        product.stock_quantity > 0 &&
        product.discount_price &&
        parseFloat(product.discount_price) < parseFloat(product.price) && (
          <div class="absolute top-3 left-3 flex gap-1 z-10">
            <span class="bg-black text-white text-xs font-medium px-3 py-1 tracking-wider">SALE</span>
          </div>
        )
    }

    <img
      src={getFirstImage(product)}
      alt={product.name}
      class="w-full h-80 object-contain transition-all duration-700 ease-out group-hover:scale-102 filter group-hover:contrast-110"
    />

    <!-- Action Buttons that appear on hover -->
    <div
      class="absolute inset-0 flex flex-col items-center justify-center gap-2 transition-all duration-500 group-hover:bg-black/5"
    >
      <!-- Quick View Icon -->
      <div
        class="absolute top-4 right-4 flex flex-col gap-3 transition-all duration-500 opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0"
      >
        <a
          href={`/shop/${product.slug}`}
          class="bg-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 border border-gray-100 hover:border-gray-300"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-4 w-4 text-gray-700"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </a>
      </div>

      <!-- Add to Cart Button - Monochromatic -->
      <button
        class="add-to-cart-btn absolute w-full bottom-0 left-0 cursor-pointer right-0 mx-auto py-3 text-center text-white font-medium tracking-wide transition-all duration-500 bg-gray-900 hover:bg-black opacity-0 group-hover:opacity-100 overflow-hidden border-t border-gray-800"
        data-product-id={product.id}
        onclick={`addToCart(${JSON.stringify(product)}, this)`}
        disabled={!product.in_stock || product.stock_quantity <= 0}
      >
        <span class="btn-text transition-all duration-300">
          {
            product.in_stock && product.stock_quantity > 0
              ? "ADD TO CART"
              : "OUT OF STOCK"
          }
        </span>
        <span class="btn-success hidden">
          <svg class="inline-block w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
          ADDED TO CART
        </span>
      </button>
    </div>

    <!-- Wishlist Heart Icon -->
    <button
      class="wishlist-btn absolute bottom-16 right-4 bg-white p-3 rounded-full shadow-lg transition-all duration-500 transform opacity-0 group-hover:opacity-100 hover:scale-110 translate-x-2 group-hover:translate-x-0 border border-gray-100 hover:border-gray-300"
      data-product-id={product.id}
      onclick={`toggleWishlist(${JSON.stringify(product)}, this)`}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="wishlist-icon h-4 w-4 text-gray-700"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
        ></path>
      </svg>
    </button>
  </div>

  <!-- Product Info -->
  <div class="p-5 flex-grow">
    <a href={`/shop/${product.slug}`} class="block">
      <h3 class="font-semibold text-lg text-gray-900 hover:text-gray-600 transition-colors duration-300 leading-tight">
        {product.name}
      </h3>
    </a>
    <div class="mt-3 flex items-center">
      {
        product.discount_price &&
        parseFloat(product.discount_price) < parseFloat(product.price) ? (
          <div class="flex items-center gap-2">
            <span class="font-bold text-lg text-gray-900">{formatPrice(product.discount_price)}</span>
            <span class="line-through text-gray-500 text-sm">
              {formatPrice(product.price)}
            </span>
          </div>
        ) : (
          <span class="font-bold text-lg text-gray-900">{formatPrice(product.price)}</span>
        )
      }
    </div>

    {/* Show variant attributes if available */}
    {
      product.attributes && Object.keys(product.attributes).length > 0 && (
        <div class="mt-2 text-sm text-gray-600">
          {Object.entries(product.attributes)
            .slice(0, 1)
            .map(([key, value]) => (
              <span class="capitalize">
                {key}: {value}
              </span>
            ))}
        </div>
      )
    }
  </div>


</div>

<style>
  /* Custom scale for subtle hover effect */
  .group-hover\:scale-102:hover {
    transform: scale(1.02);
  }

  /* Elegant button hover animation */
  .add-to-cart-btn:hover {
    animation: subtle-pulse 0.6s ease-in-out;
    transform: translateY(-1px);
  }

  /* Success state - monochromatic */
  .add-to-cart-btn.success {
    background-color: #374151 !important;
    transform: scale(1.02) translateY(-1px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  .add-to-cart-btn.success .btn-text {
    display: none;
  }

  .add-to-cart-btn.success .btn-success {
    display: inline-block;
    animation: elegant-slide-in 0.4s ease-out;
  }



  /* Refined keyframe animations */
  @keyframes subtle-pulse {
    0% { transform: scale(1) translateY(0); }
    50% { transform: scale(1.01) translateY(-1px); }
    100% { transform: scale(1) translateY(-1px); }
  }

  @keyframes elegant-slide-in {
    0% {
      transform: translateY(-10px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes refined-bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0, -4px, 0);
    }
    70% {
      transform: translate3d(0, -2px, 0);
    }
    90% {
      transform: translate3d(0, -1px, 0);
    }
  }

  /* Cart icon refined bounce animation */
  .cart-bounce {
    animation: refined-bounce 0.8s ease-in-out;
  }

  /* Additional elegant hover effects */
  .group:hover .bg-white {
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  /* Wishlist button styles */
  .wishlist-btn.wishlist-active {
    background-color: #ef4444;
    border-color: #ef4444;
  }

  .wishlist-btn.wishlist-active .wishlist-icon {
    fill: white;
    color: white;
  }

  .wishlist-btn.wishlist-active:hover {
    background-color: #dc2626;
    border-color: #dc2626;
  }
</style>

<script is:inline>
  // Initialize wishlist state on page load
  document.addEventListener('DOMContentLoaded', function() {
    updateWishlistButtons();
  });

  function addToCart(product, buttonElement) {
    if (!product.in_stock || product.stock_quantity <= 0) {
      showToast("Product is out of stock", "error");
      return;
    }

    // Disable button and show loading state
    buttonElement.disabled = true;
    buttonElement.style.transform = "scale(0.98) translateY(0)";

    // Use the proper cart structure
    let cart = JSON.parse(localStorage.getItem("cart")) || {
      items: [],
      totalItems: 0,
      subtotal: 0,
    };

    // Ensure cart.items exists
    if (!cart.items) {
      cart.items = [];
    }

    const existingItemIndex = cart.items.findIndex(
      (item) => item.id === product.id
    );

    if (existingItemIndex >= 0) {
      // Update quantity if item already exists
      cart.items[existingItemIndex].quantity += 1;
    } else {
      // Add new item
      cart.items.push({
        id: product.id,
        name: product.name,
        price: product.discount_price || product.price,
        image:
          product.gallery && product.gallery[0]
            ? product.gallery[0]
            : "https://placehold.co/400x400",
        quantity: 1,
      });
    }

    // Update cart totals
    cart.totalItems = cart.items.reduce(
      (total, item) => total + item.quantity,
      0
    );
    cart.subtotal = cart.items.reduce(
      (total, item) => total + parseFloat(item.price) * item.quantity,
      0
    );

    localStorage.setItem("cart", JSON.stringify(cart));

    // Animate button success state
    setTimeout(() => {
      buttonElement.classList.add("success");
      buttonElement.style.transform = "scale(1.02) translateY(-1px)";
      
      // Show toast notification
      showToast(`${product.name} added to cart`, "success");
      
      // Animate cart icon if it exists
      const cartIcon = document.querySelector('.cart-icon');
      if (cartIcon) {
        cartIcon.classList.add('cart-bounce');
        setTimeout(() => cartIcon.classList.remove('cart-bounce'), 800);
      }
      
      // Dispatch custom event for cart updates
      window.dispatchEvent(new CustomEvent("cart-updated", { detail: cart }));
    }, 200);

    // Reset button state after animation
    setTimeout(() => {
      buttonElement.classList.remove("success");
      buttonElement.disabled = false;
      buttonElement.querySelector('.btn-text').style.display = 'inline-block';
      buttonElement.querySelector('.btn-success').style.display = 'none';
      buttonElement.style.transform = '';
    }, 2500);
  }

  function toggleWishlist(product, buttonElement) {
    let wishlist = JSON.parse(localStorage.getItem("wishlist")) || { items: [], totalItems: 0 };
    
    // Convert array format to object format if needed
    if (Array.isArray(wishlist)) {
      wishlist = { items: wishlist, totalItems: wishlist.length };
    }
    
    // Ensure wishlist.items exists
    if (!wishlist.items) {
      wishlist.items = [];
    }
    
    const isInWishlist = wishlist.items.some(item => item.id === product.id);
    
    if (isInWishlist) {
      // Remove from wishlist
      wishlist.items = wishlist.items.filter(item => item.id !== product.id);
      wishlist.totalItems = wishlist.items.length;
      localStorage.setItem("wishlist", JSON.stringify(wishlist));
      
      // Update button appearance
      buttonElement.classList.remove("wishlist-active");
      showToast(`${product.name} removed from wishlist`, "info");
    } else {
      // Add to wishlist
      wishlist.items.push({
        id: product.id,
        name: product.name,
        slug: product.slug,
        price: product.price,
        discount_price: product.discount_price,
        image: product.gallery && product.gallery[0] ? product.gallery[0] : "https://placehold.co/400x400",
        in_stock: product.in_stock,
        stock_quantity: product.stock_quantity,
        attributes: product.attributes || {}
      });
      wishlist.totalItems = wishlist.items.length;
      localStorage.setItem("wishlist", JSON.stringify(wishlist));
      
      // Update button appearance
      buttonElement.classList.add("wishlist-active");
      showToast(`${product.name} added to wishlist`, "success");
    }
    
    // Dispatch custom event for wishlist updates
    window.dispatchEvent(new CustomEvent("wishlist-updated", { detail: wishlist }));
    
    // Update wishlist count in navbar
    updateWishlistCount();
  }

  function updateWishlistButtons() {
    const wishlist = JSON.parse(localStorage.getItem("wishlist")) || { items: [], totalItems: 0 };
    const wishlistButtons = document.querySelectorAll('.wishlist-btn');
    
    // Handle both array format and object format with items property
    const wishlistItems = Array.isArray(wishlist) ? wishlist : (wishlist.items || []);
    
    wishlistButtons.forEach(button => {
      const productId = parseInt(button.getAttribute('data-product-id'));
      const isInWishlist = wishlistItems.some(item => item.id === productId);
      
      if (isInWishlist) {
        button.classList.add("wishlist-active");
      } else {
        button.classList.remove("wishlist-active");
      }
    });
  }

  function updateWishlistCount() {
    const wishlist = JSON.parse(localStorage.getItem("wishlist")) || { items: [], totalItems: 0 };
    const wishlistCounts = document.querySelectorAll('.wishlist-count');
    
    // Handle both array format and object format with items property
    const wishlistItems = Array.isArray(wishlist) ? wishlist : (wishlist.items || []);
    const totalItems = Array.isArray(wishlist) ? wishlist.length : (wishlist.totalItems || 0);
    
    wishlistCounts.forEach(countElement => {
      countElement.textContent = totalItems || "";
      countElement.classList.toggle("hidden", totalItems === 0);
    });
  }

  function showToast(message, type = "success") {
    // Use the global custom toast component
    if (window.customToast) {
      window.customToast.show(message, type, 4000);
    }
  }

  // Listen for wishlist updates
  window.addEventListener('wishlist-updated', function() {
    updateWishlistButtons();
    updateWishlistCount();
  });
</script>